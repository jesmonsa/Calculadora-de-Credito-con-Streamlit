import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import io
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Calculadora de Cr√©dito",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para mejorar el dise√±o
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .info-box {
        background-color: #e8f4fd;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
        margin: 1rem 0;
    }
    .formula-box {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #dee2e6;
        font-family: 'Courier New', monospace;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def calcular_cuota_mensual(monto, tasa_anual, plazo_anos):
    """
    Calcula la cuota mensual usando la f√≥rmula de amortizaci√≥n est√°ndar
    """
    if tasa_anual == 0:
        return monto / (plazo_anos * 12)
    
    tasa_mensual = tasa_anual / 100 / 12
    num_pagos = plazo_anos * 12
    
    cuota = monto * (tasa_mensual * (1 + tasa_mensual)**num_pagos) / ((1 + tasa_mensual)**num_pagos - 1)
    return cuota

def generar_tabla_amortizacion(monto, tasa_anual, plazo_anos, cuota_seguro=0):
    """
    Genera la tabla de amortizaci√≥n completa con c√°lculos precisos
    """
    cuota_mensual = calcular_cuota_mensual(monto, tasa_anual, plazo_anos)
    tasa_mensual = tasa_anual / 100 / 12
    num_pagos = plazo_anos * 12
    
    tabla = []
    saldo_pendiente = monto
    
    for mes in range(1, num_pagos + 1):
        if tasa_anual == 0:
            interes = 0
            abono_capital = cuota_mensual
        else:
            interes = saldo_pendiente * tasa_mensual
            abono_capital = cuota_mensual - interes
        
        # Para el √∫ltimo pago, ajustar para que el saldo sea exactamente 0
        if mes == num_pagos:
            abono_capital = saldo_pendiente
            cuota_ajustada = interes + abono_capital
        else:
            cuota_ajustada = cuota_mensual
        
        saldo_pendiente -= abono_capital
        
        # Asegurar que el saldo no sea negativo
        if saldo_pendiente < 0.01:
            saldo_pendiente = 0
        
        tabla.append({
            'Mes': mes,
            'Cuota Cr√©dito': round(cuota_ajustada, 2),
            'Inter√©s': round(interes, 2),
            'Abono Capital': round(abono_capital, 2),
            'Seguro': round(cuota_seguro, 2),
            'Pago Total': round(cuota_ajustada + cuota_seguro, 2),
            'Saldo Pendiente': round(saldo_pendiente, 2)
        })
    
    return pd.DataFrame(tabla)

def generar_datos_anuales(tabla_amortizacion, cuota_seguro):
    """
    Genera datos agregados por a√±o para el gr√°fico de barras apiladas
    """
    # Crear una copia para no modificar la tabla original
    tabla_copia = tabla_amortizacion.copy()
    
    # Agregar columna de a√±o
    tabla_copia['A√±o'] = ((tabla_copia['Mes'] - 1) // 12) + 1
    
    # Agrupar por a√±o y sumar
    datos_anuales = tabla_copia.groupby('A√±o').agg({
        'Abono Capital': 'sum',
        'Inter√©s': 'sum',
        'Seguro': 'sum'
    }).reset_index()
    
    # Renombrar columnas para mejor presentaci√≥n
    datos_anuales.columns = ['A√±o', 'Capital', 'Intereses', 'Seguros']
    
    return datos_anuales

def generar_pdf_tabla_amortizacion(tabla_amortizacion, monto, tasa_anual, plazo_anos, cuota_seguro):
    """
    Genera un PDF con la tabla de amortizaci√≥n
    """
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []
    
    # T√≠tulo
    title = Paragraph("Tabla de Amortizaci√≥n", styles['Title'])
    story.append(title)
    story.append(Spacer(1, 12))
    
    # Informaci√≥n del cr√©dito
    info_text = f"""
    <b>Informaci√≥n del Cr√©dito:</b><br/>
    Monto: ${monto:,.2f}<br/>
    Tasa Anual: {tasa_anual:.2f}%<br/>
    Plazo: {plazo_anos} a√±os<br/>
    Seguro Mensual: ${cuota_seguro:,.2f}
    """
    info = Paragraph(info_text, styles['Normal'])
    story.append(info)
    story.append(Spacer(1, 12))
    
    # Preparar datos para la tabla
    data = [['Mes', 'Cuota Cr√©dito', 'Inter√©s', 'Abono Capital', 'Seguro', 'Pago Total', 'Saldo Pendiente']]
    
    for _, row in tabla_amortizacion.iterrows():
        data.append([
            str(int(row['Mes'])),
            f"${row['Cuota Cr√©dito']:,.2f}",
            f"${row['Inter√©s']:,.2f}",
            f"${row['Abono Capital']:,.2f}",
            f"${row['Seguro']:,.2f}",
            f"${row['Pago Total']:,.2f}",
            f"${row['Saldo Pendiente']:,.2f}"
        ])
    
    # Crear tabla
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('FONTSIZE', (0, 1), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    doc.build(story)
    buffer.seek(0)
    return buffer

def obtener_parametros_credito():
    """
    Obtiene los par√°metros del cr√©dito desde el sidebar
    """
    st.sidebar.header("üìù Par√°metros del Cr√©dito")
    
    monto = st.sidebar.number_input(
        "Monto del pr√©stamo ($)",
        min_value=1000,
        max_value=10000000,
        value=100000,
        step=1000,
        help="Ingresa el monto del pr√©stamo (entre $1,000 y $10,000,000)"
    )
    
    tasa_anual = st.sidebar.number_input(
        "Tasa de inter√©s anual (%)",
        min_value=0.0,
        max_value=50.0,
        value=12.0,
        step=0.1,
        help="Ingresa la tasa de inter√©s anual (entre 0% y 50%)"
    )
    
    plazo_anos = st.sidebar.number_input(
        "Plazo en a√±os",
        min_value=1,
        max_value=30,
        value=5,
        step=1,
        help="Ingresa el plazo del cr√©dito (entre 1 y 30 a√±os)"
    )
    
    cuota_seguro = st.sidebar.number_input(
        "Cuota mensual de seguro ($)",
        min_value=0,
        max_value=500,
        value=30,
        step=5,
        help="Ingresa la cuota mensual de seguro (entre $0 y $500)"
    )
    
    return monto, tasa_anual, plazo_anos, cuota_seguro

def pagina_entrada_datos_resumen():
    """
    P√°gina de entrada de datos, resumen y gr√°fico
    """
    st.markdown('<h1 class="main-header">üí∞ Calculadora de Cr√©dito</h1>', unsafe_allow_html=True)
    
    # Obtener par√°metros
    monto, tasa_anual, plazo_anos, cuota_seguro = obtener_parametros_credito()
    
    # Informaci√≥n adicional
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ‚ÑπÔ∏è Informaci√≥n")
    st.sidebar.info("""
    Esta calculadora utiliza la f√≥rmula est√°ndar de amortizaci√≥n para calcular las cuotas mensuales.
    
    Los resultados son aproximados y pueden variar seg√∫n las condiciones espec√≠ficas del prestamista.
    """)
    
    # C√°lculos principales
    if st.sidebar.button("üîÑ Calcular", type="primary"):
        # Calcular m√©tricas principales
        cuota_mensual = calcular_cuota_mensual(monto, tasa_anual, plazo_anos)
        total_pagado = cuota_mensual * plazo_anos * 12
        intereses_pagados = total_pagado - monto
        total_seguros = cuota_seguro * plazo_anos * 12
        total_general = total_pagado + total_seguros
        
        # Generar tabla de amortizaci√≥n
        tabla_amortizacion = generar_tabla_amortizacion(monto, tasa_anual, plazo_anos, cuota_seguro)
        
        # Guardar en session state para usar en otras p√°ginas
        st.session_state.tabla_amortizacion = tabla_amortizacion
        st.session_state.parametros = {
            'monto': monto,
            'tasa_anual': tasa_anual,
            'plazo_anos': plazo_anos,
            'cuota_seguro': cuota_seguro,
            'cuota_mensual': cuota_mensual,
            'total_pagado': total_pagado,
            'intereses_pagados': intereses_pagados,
            'total_seguros': total_seguros,
            'total_general': total_general
        }
        
        # Mostrar resumen compacto
        st.markdown("## üìä Resumen del Cr√©dito")
        
        # M√©tricas principales en formato compacto
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üí∞ Monto", f"${monto:,.0f}")
            st.metric("üìà Tasa Anual", f"{tasa_anual:.1f}%")
        
        with col2:
            st.metric("‚è±Ô∏è Plazo", f"{plazo_anos} a√±os")
            st.metric("üíµ Cuota Cr√©dito", f"${cuota_mensual:,.0f}")
        
        with col3:
            st.metric("üõ°Ô∏è Cuota Seguro", f"${cuota_seguro:,.0f}")
            st.metric("üìÖ Total Cuotas", f"{plazo_anos * 12}")
        
        with col4:
            st.metric("üí∏ Total a Pagar", f"${total_general:,.0f}")
            st.metric("üìä Intereses Totales", f"${intereses_pagados:,.0f}")
        
        # Resumen detallado en formato compacto
        st.markdown("### üìã Detalles del Cr√©dito")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            **üí∞ Financiamiento:**
            - Monto del pr√©stamo: ${monto:,.2f}
            - Tasa de inter√©s anual: {tasa_anual:.2f}%
            - Plazo: {plazo_anos} a√±os ({plazo_anos * 12} pagos)
            
            **üíµ Pagos Mensuales:**
            - Cuota del cr√©dito: ${cuota_mensual:,.2f}
            - Cuota de seguro: ${cuota_seguro:,.2f}
            - Total mensual: ${cuota_mensual + cuota_seguro:,.2f}
            """)
        
        with col2:
            st.markdown(f"""
            **üìä Totales:**
            - Total de cuotas: ${total_pagado:,.2f}
            - Total de seguros: ${total_seguros:,.2f}
            - Total a pagar: ${total_general:,.2f}
            - Intereses totales: ${intereses_pagados:,.2f}
            - Total de seguros: ${total_seguros:,.2f}
            """)
        
        # Gr√°fico de distribuci√≥n anual
        st.markdown("## üìä Distribuci√≥n Anual de Pagos")
        
        # Generar datos anuales
        datos_anuales = generar_datos_anuales(tabla_amortizacion, cuota_seguro)
        
        # Crear gr√°fico de barras apiladas con Plotly
        fig = go.Figure()
        
        # Agregar barras para cada componente
        fig.add_trace(go.Bar(
            name='Capital',
            x=datos_anuales['A√±o'],
            y=datos_anuales['Capital'],
            marker_color='#1f77b4',
            hovertemplate='<b>A√±o %{x}</b><br>Capital: $%{y:,.2f}<extra></extra>'
        ))
        
        fig.add_trace(go.Bar(
            name='Intereses',
            x=datos_anuales['A√±o'],
            y=datos_anuales['Intereses'],
            marker_color='#ff7f0e',
            hovertemplate='<b>A√±o %{x}</b><br>Intereses: $%{y:,.2f}<extra></extra>'
        ))
        
        fig.add_trace(go.Bar(
            name='Seguros',
            x=datos_anuales['A√±o'],
            y=datos_anuales['Seguros'],
            marker_color='#2ca02c',
            hovertemplate='<b>A√±o %{x}</b><br>Seguros: $%{y:,.2f}<extra></extra>'
        ))
        
        # Configurar el layout del gr√°fico
        fig.update_layout(
            title='Distribuci√≥n de Pagos por A√±o',
            xaxis_title='A√±o del Cr√©dito',
            yaxis_title='Monto ($)',
            barmode='stack',
            height=500,
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            ),
            hovermode='x unified',
            yaxis=dict(tickformat='$,.0f')
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Resumen anual compacto
        st.markdown("### üìã Resumen por A√±o")
        resumen_anual = datos_anuales.copy()
        resumen_anual['Total A√±o'] = resumen_anual['Capital'] + resumen_anual['Intereses'] + resumen_anual['Seguros']
        resumen_anual['Capital'] = resumen_anual['Capital'].apply(lambda x: f"${x:,.0f}")
        resumen_anual['Intereses'] = resumen_anual['Intereses'].apply(lambda x: f"${x:,.0f}")
        resumen_anual['Seguros'] = resumen_anual['Seguros'].apply(lambda x: f"${x:,.0f}")
        resumen_anual['Total A√±o'] = resumen_anual['Total A√±o'].apply(lambda x: f"${x:,.0f}")
        
        st.dataframe(
            resumen_anual,
            width='stretch',
            hide_index=True,
            column_config={
                "A√±o": st.column_config.NumberColumn("A√±o", help="A√±o del cr√©dito"),
                "Capital": st.column_config.TextColumn("Capital", help="Capital pagado en el a√±o"),
                "Intereses": st.column_config.TextColumn("Intereses", help="Intereses pagados en el a√±o"),
                "Seguros": st.column_config.TextColumn("Seguros", help="Seguros pagados en el a√±o"),
                "Total A√±o": st.column_config.TextColumn("Total A√±o", help="Total pagado en el a√±o")
            }
        )
    
    else:
        # Mensaje inicial
        st.markdown("## üëã ¬°Bienvenido a la Calculadora de Cr√©dito!")
        
        st.markdown("""
        Esta aplicaci√≥n te permite calcular:
        
        ‚úÖ **Cuota mensual** de tu cr√©dito
        ‚úÖ **Total pagado** al final del per√≠odo
        ‚úÖ **Intereses pagados** durante todo el cr√©dito
        ‚úÖ **Tabla de amortizaci√≥n completa** con desglose mes a mes
        
        ### üöÄ C√≥mo usar:
        1. Completa los par√°metros del cr√©dito en la barra lateral
        2. Haz clic en "Calcular" para ver los resultados
        3. Explora la tabla de amortizaci√≥n en la segunda p√°gina
        4. Descarga los resultados si lo necesitas
        
        ### üìä Caracter√≠sticas:
        - Validaci√≥n de rangos para todos los campos
        - C√°lculos precisos usando f√≥rmulas est√°ndar
        - Interfaz moderna y responsive
        - Tabla de amortizaci√≥n organizada en pesta√±as para cr√©ditos largos
        - Gr√°ficos visuales para mejor comprensi√≥n
        - Exportaci√≥n de datos en formato CSV y PDF
        """)
        
        # Ejemplo de uso
        st.markdown("### üí° Ejemplo de Uso")
        st.markdown("""
        **Prueba con estos valores:**
        - Monto: $100,000
        - Tasa: 12% anual
        - Plazo: 5 a√±os
        - Seguro: $30/mes
        
        Esto te dar√° una cuota mensual de aproximadamente $2,224.44
        """)

def pagina_tabla_amortizacion():
    """
    P√°gina de tabla de amortizaci√≥n con descarga PDF
    """
    st.markdown('<h1 class="main-header">üìÖ Tabla de Amortizaci√≥n</h1>', unsafe_allow_html=True)
    
    # Verificar si hay datos calculados
    if 'tabla_amortizacion' not in st.session_state or 'parametros' not in st.session_state:
        st.warning("‚ö†Ô∏è Primero debes calcular el cr√©dito en la p√°gina de 'Entrada de Datos y Resumen'")
        st.info("üí° Ve a la primera p√°gina, ingresa los par√°metros del cr√©dito y haz clic en 'Calcular'")
        return
    
    # Obtener datos del session state
    tabla_amortizacion = st.session_state.tabla_amortizacion
    parametros = st.session_state.parametros
    
    # Mostrar informaci√≥n del cr√©dito
    st.markdown("## üìã Informaci√≥n del Cr√©dito")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üí∞ Monto", f"${parametros['monto']:,.0f}")
        st.metric("üìà Tasa Anual", f"{parametros['tasa_anual']:.1f}%")
    
    with col2:
        st.metric("‚è±Ô∏è Plazo", f"{parametros['plazo_anos']} a√±os")
        st.metric("üíµ Cuota Cr√©dito", f"${parametros['cuota_mensual']:,.0f}")
    
    with col3:
        st.metric("üõ°Ô∏è Cuota Seguro", f"${parametros['cuota_seguro']:,.0f}")
        st.metric("üìÖ Total Cuotas", f"{parametros['plazo_anos'] * 12}")
    
    with col4:
        st.metric("üí∏ Total a Pagar", f"${parametros['total_general']:,.0f}")
        st.metric("üìä Intereses Totales", f"${parametros['intereses_pagados']:,.0f}")
    
    # Tabla de amortizaci√≥n
    st.markdown("## üìÖ Tabla de Amortizaci√≥n Completa")
    st.markdown("Esta tabla muestra el desglose mes a mes de tu cr√©dito, incluyendo el inter√©s pagado, abono al capital, cuota total y saldo pendiente.")
    
    # Organizar en pesta√±as si el plazo es mayor a 1 a√±o
    if parametros['plazo_anos'] > 1:
        # Dividir en per√≠odos de 4 a√±os
        periodos = []
        for i in range(0, parametros['plazo_anos'], 4):
            inicio = i * 12 + 1
            fin = min((i + 4) * 12, parametros['plazo_anos'] * 12)
            periodos.append((f"A√±os {i+1}-{min(i+4, parametros['plazo_anos'])}", inicio, fin))
        
        tabs = st.tabs([periodo[0] for periodo in periodos])
        
        for i, (nombre_periodo, inicio, fin) in enumerate(periodos):
            with tabs[i]:
                periodo_df = tabla_amortizacion[(tabla_amortizacion['Mes'] >= inicio) & (tabla_amortizacion['Mes'] <= fin)].copy()
                
                # Formatear los n√∫meros para mejor visualizaci√≥n
                periodo_df_display = periodo_df.copy()
                periodo_df_display['Cuota Cr√©dito'] = periodo_df_display['Cuota Cr√©dito'].apply(lambda x: f"${x:,.2f}")
                periodo_df_display['Inter√©s'] = periodo_df_display['Inter√©s'].apply(lambda x: f"${x:,.2f}")
                periodo_df_display['Abono Capital'] = periodo_df_display['Abono Capital'].apply(lambda x: f"${x:,.2f}")
                periodo_df_display['Seguro'] = periodo_df_display['Seguro'].apply(lambda x: f"${x:,.2f}")
                periodo_df_display['Pago Total'] = periodo_df_display['Pago Total'].apply(lambda x: f"${x:,.2f}")
                periodo_df_display['Saldo Pendiente'] = periodo_df_display['Saldo Pendiente'].apply(lambda x: f"${x:,.2f}")
                
                st.dataframe(
                    periodo_df_display, 
                    width='stretch', 
                    hide_index=True,
                    column_config={
                        "Mes": st.column_config.NumberColumn("Mes", help="N√∫mero del mes del cr√©dito"),
                        "Cuota Cr√©dito": st.column_config.TextColumn("Cuota Cr√©dito", help="Pago mensual del cr√©dito (sin seguro)"),
                        "Inter√©s": st.column_config.TextColumn("Inter√©s", help="Porci√≥n de la cuota que corresponde a intereses"),
                        "Abono Capital": st.column_config.TextColumn("Abono Capital", help="Porci√≥n de la cuota que reduce el capital"),
                        "Seguro": st.column_config.TextColumn("Seguro", help="Cuota mensual de seguro"),
                        "Pago Total": st.column_config.TextColumn("Pago Total", help="Total a pagar mensualmente (cr√©dito + seguro)"),
                        "Saldo Pendiente": st.column_config.TextColumn("Saldo Pendiente", help="Capital restante despu√©s de cada pago")
                    }
                )
                
                # Mostrar resumen del per√≠odo
                st.markdown(f"**üìä Resumen del per√≠odo {nombre_periodo}:**")
                col1, col2, col3, col4, col5 = st.columns(5)
                with col1:
                    st.metric("Total Pagado", f"${periodo_df['Pago Total'].sum():,.2f}")
                with col2:
                    st.metric("Intereses", f"${periodo_df['Inter√©s'].sum():,.2f}")
                with col3:
                    st.metric("Capital", f"${periodo_df['Abono Capital'].sum():,.2f}")
                with col4:
                    st.metric("Seguros", f"${periodo_df['Seguro'].sum():,.2f}")
                with col5:
                    st.metric("Meses", f"{len(periodo_df)}")
    else:
        # Mostrar tabla completa para cr√©ditos de 1 a√±o o menos
        tabla_display = tabla_amortizacion.copy()
        tabla_display['Cuota Cr√©dito'] = tabla_display['Cuota Cr√©dito'].apply(lambda x: f"${x:,.2f}")
        tabla_display['Inter√©s'] = tabla_display['Inter√©s'].apply(lambda x: f"${x:,.2f}")
        tabla_display['Abono Capital'] = tabla_display['Abono Capital'].apply(lambda x: f"${x:,.2f}")
        tabla_display['Seguro'] = tabla_display['Seguro'].apply(lambda x: f"${x:,.2f}")
        tabla_display['Pago Total'] = tabla_display['Pago Total'].apply(lambda x: f"${x:,.2f}")
        tabla_display['Saldo Pendiente'] = tabla_display['Saldo Pendiente'].apply(lambda x: f"${x:,.2f}")
        
        st.dataframe(
            tabla_display, 
            width='stretch', 
            hide_index=True,
            column_config={
                "Mes": st.column_config.NumberColumn("Mes", help="N√∫mero del mes del cr√©dito"),
                "Cuota Cr√©dito": st.column_config.TextColumn("Cuota Cr√©dito", help="Pago mensual del cr√©dito (sin seguro)"),
                "Inter√©s": st.column_config.TextColumn("Inter√©s", help="Porci√≥n de la cuota que corresponde a intereses"),
                "Abono Capital": st.column_config.TextColumn("Abono Capital", help="Porci√≥n de la cuota que reduce el capital"),
                "Seguro": st.column_config.TextColumn("Seguro", help="Cuota mensual de seguro"),
                "Pago Total": st.column_config.TextColumn("Pago Total", help="Total a pagar mensualmente (cr√©dito + seguro)"),
                "Saldo Pendiente": st.column_config.TextColumn("Saldo Pendiente", help="Capital restante despu√©s de cada pago")
            }
        )
        
        # Mostrar resumen para cr√©ditos cortos
        st.markdown("**üìä Resumen del cr√©dito:**")
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            st.metric("Total Pagado", f"${tabla_amortizacion['Pago Total'].sum():,.2f}")
        with col2:
            st.metric("Intereses", f"${tabla_amortizacion['Inter√©s'].sum():,.2f}")
        with col3:
            st.metric("Capital", f"${tabla_amortizacion['Abono Capital'].sum():,.2f}")
        with col4:
            st.metric("Seguros", f"${tabla_amortizacion['Seguro'].sum():,.2f}")
        with col5:
            st.metric("Meses", f"{len(tabla_amortizacion)}")
    
    # Botones de descarga
    st.markdown("## üíæ Exportar Datos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Descarga CSV
        csv = tabla_amortizacion.to_csv(index=False)
        st.download_button(
            label="üì• Descargar Tabla de Amortizaci√≥n (CSV)",
            data=csv,
            file_name=f"tabla_amortizacion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
    
    with col2:
        # Descarga PDF
        if st.button("üìÑ Generar PDF", type="primary"):
            try:
                pdf_buffer = generar_pdf_tabla_amortizacion(
                    tabla_amortizacion,
                    parametros['monto'],
                    parametros['tasa_anual'],
                    parametros['plazo_anos'],
                    parametros['cuota_seguro']
                )
                
                st.download_button(
                    label="üì• Descargar Tabla de Amortizaci√≥n (PDF)",
                    data=pdf_buffer.getvalue(),
                    file_name=f"tabla_amortizacion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                    mime="application/pdf"
                )
            except Exception as e:
                st.error(f"Error al generar PDF: {str(e)}")
                st.info("üí° Aseg√∫rate de tener instalada la librer√≠a reportlab: pip install reportlab")

def main():
    # Men√∫ lateral para navegaci√≥n
    st.sidebar.title("üßÆ Calculadora de Cr√©dito")
    st.sidebar.markdown("---")
    
    # Opciones del men√∫
    opcion = st.sidebar.radio(
        "üìã Navegaci√≥n",
        ["üìä Entrada de Datos y Resumen", "üìÖ Tabla de Amortizaci√≥n"],
        index=0
    )
    
    # Router simple para mostrar la p√°gina correspondiente
    if opcion == "üìä Entrada de Datos y Resumen":
        pagina_entrada_datos_resumen()
    elif opcion == "üìÖ Tabla de Amortizaci√≥n":
        pagina_tabla_amortizacion()

if __name__ == "__main__":
    main()